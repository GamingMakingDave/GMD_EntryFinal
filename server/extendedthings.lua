-- -- extended payout es_extended/server/paycheck.lua line: 1-45
-- function StartPayCheckGMD()
--     CreateThread(function()
--         while true do
--             Wait(100)
--             local xPlayers = ESX.GetExtendedPlayers()
--             for i = 1, #(xPlayers) do
--                 local xPlayer = xPlayers[i]
--                 local job = xPlayer.job.grade_name
--                 local salary = xPlayer.job.grade_salary

--                 if salary > 0 then
--                     local response = MySQL.query.await('SELECT `entry_type` FROM `users` WHERE `identifier` = ?', {
--                         xPlayer.identifier
--                     })
--                     if response and #response > 0 then
--                         local entryType = response[1].entry_type

--                         if entryType == false then
--                             print("legal")
--                             if job == 'unemployed' then -- unemployed
--                                 xPlayer.addAccountMoney('bank', salary, "Welfare Check")
--                                 TriggerClientEvent('esx:showAdvancedNotification', xPlayer.source, _U('bank'), _U('received_paycheck'), _U('received_help', salary),
--                                     'CHAR_BANK_MAZE', 9)
--                             elseif Config.EnableSocietyPayouts then -- possibly a society
--                                 TriggerEvent('esx_society:getSociety', xPlayer.job.name, function(society)
--                                     if society ~= nil then -- verified society
--                                         TriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)
--                                             if account.money >= salary then -- does the society have enough money to pay its employees?
--                                                 xPlayer.addAccountMoney('bank', salary, "Paycheck")
--                                                 account.removeMoney(salary)

--                                                 TriggerClientEvent('esx:showAdvancedNotification', xPlayer.source, _U('bank'), _U('received_paycheck'),
--                                                     _U('received_salary', salary), 'CHAR_BANK_MAZE', 9)
--                                             else
--                                                 TriggerClientEvent('esx:showAdvancedNotification', xPlayer.source, _U('bank'), '', _U('company_nomoney'), 'CHAR_BANK_MAZE', 1)
--                                             end
--                                         end)
--                                     else -- not a society
--                                         xPlayer.addAccountMoney('bank', salary, "Paycheck")
--                                         TriggerClientEvent('esx:showAdvancedNotification', xPlayer.source, _U('bank'), _U('received_paycheck'), _U('received_salary', salary),
--                                             'CHAR_BANK_MAZE', 9)
--                                     end
--                                 end)
--                             else -- generic job
--                                 xPlayer.addAccountMoney('bank', salary, "Paycheck")
--                                 TriggerClientEvent('esx:showAdvancedNotification', xPlayer.source, _U('bank'), _U('received_paycheck'), _U('received_salary', salary),
--                                     'CHAR_BANK_MAZE', 9)
--                             end
--                         elseif entryType == true then
--                             print("illegal")
--                             -- Only job payout, do not pay additional salary
--                             if not (job == 'unemployed' or Config.EnableSocietyPayouts) then
--                                 xPlayer.addAccountMoney('bank', salary, "Paycheck")
--                                 TriggerClientEvent('esx:showAdvancedNotification', xPlayer.source, _U('bank'), _U('received_paycheck'), _U('received_salary', salary),
--                                     'CHAR_BANK_MAZE', 9)
--                             end
--                         end
--                     end
--                 end
--             end
--         end
--     end)
-- end